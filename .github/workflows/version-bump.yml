name: Release Please

# Zweck: Automatisches Versionsmanagement und PyPI-Release basierend auf Conventional Commits
# Wann: Bei jedem Push zum main-Branch, der konventionellen Commit-Nachrichten entspricht
#      (z.B. "fix:", "feat:", "BREAKING CHANGE:") 
# Wie: 
# 1. Release Please analysiert Commit-Messages seit dem letzten Release
# 2. Erstellt oder aktualisiert einen Release-PR mit Versionsupdate und CHANGELOG
# 3. Wenn der PR gemerged wird, erstellt einen GitHub Release und veröffentlicht auf PyPI

on:
  push:
    branches:
      - main

permissions:
  contents: write    # Für Release-Erstellung und Tag-Push
  pull-requests: write  # Für PR-Erstellung/-Update
  id-token: write    # Für PyPI Trusted Publishing

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      version: ${{ steps.release.outputs.version }}
    steps:
      # Release Please: Verwaltet Versionen, Changelog und Release-PRs
      - uses: google-github-actions/release-please-action@v4  # Upgrade auf v4 für bessere Funktionalität
        id: release
        with:
          release-type: python
          package-name: mcp-reflect
          bump-minor-pre-major: true
          bump-patch-for-minor-pre-major: true
          include-v-in-tag: true
          token: ${{ secrets.GITHUB_TOKEN }}
          # Debug-Logging für bessere Fehlerbehebung
          debug: true
          # Explizite Version-Strategie und Datei für klares Verhalten
          version-file: "mcp_reflect/__init__.py"
          extra-files: |
            pyproject.toml:version="(\d+\.\d+\.\d+)"
          changelog-types: |
            [{"type":"feat","section":"Features","hidden":false},
             {"type":"fix","section":"Bug Fixes","hidden":false},
             {"type":"chore","section":"Miscellaneous","hidden":false},
             {"type":"docs","section":"Documentation","hidden":false},
             {"type":"perf","section":"Performance Improvements","hidden":false},
             {"type":"refactor","section":"Code Refactoring","hidden":false},
             {"type":"test","section":"Tests","hidden":false}]

  publish:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # Wichtig: Vollständigen History-Checkout für Release Please Changelog-Generierung
          fetch-depth: 0
  
      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
  
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
  
      - name: Install dependencies
        run: poetry install --no-interaction
  
      - name: Run tests
        run: poetry run pytest
  
      - name: Build package
        run: poetry build
  
      - name: Check distribution
        run: |
          pip install twine
          twine check dist/*
  
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        # No credentials needed with Trusted Publishing
  
      - name: Log release details
        run: |
          echo "Released mcp-reflect v${{ needs.release-please.outputs.version }} to PyPI"
          echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.release-please.outputs.version }}"
